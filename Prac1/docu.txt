Els criteris que s’han tingut en compte són els següents: 

Decisions de disseny, ús de funcions amb paràmetres i documentació (1/1) 
	--
Disseny del Joc de Proves i documentació (1/1) 
---
	
Creació d’un fitxer amb opcions vàlides passades per línia d’ordes amb una pilota (0,5/0,5) 
-- si, lo crea
Demanar opcions concretes a l’usuari si no s’ha entrat per línia d’ordres (0,5/0,5) 
-- si, las pide (pero no dice porq las pide)

Demanar opcions concretes a l’usuari si estan fora del rang (??/0,5) 
-- si, y no te deja poner fuera del rang

Passar més d’una pilota per línia d’ordres, controlant màxim 9 pilotes (??/0,5) 
-- si, pero se las tienes q poner con "comillas" o mas de un param a lo -1:
	./script -1 "2,3,-1.0,-1.0" -1 "2,3,-1.0,-1.0"

Què es fa si s’afegeixen pilotes i el fitxer existeix? (??/0,5) 
-- sobreescribe las q hay en el fitxer

Tractament d’errors/excepcions (??/0,5) 
-- ns, sale con error y te dice q ha pasado (falta hacer tests para ver cuando peta)

Validació dinàmica dels rangs de les variables (??/0,5) 
-- si, antes de guardar mira y compara con las q se le ha pasado / va a gardar:
ejemplo:
    # validate WIDTH_GOAL 8 $((CONFIG_Y-1)) "Mida porteria"
    if not 8 <= cfg.width_goal <= cfg.y - 1:
        cfg.width_goal = util_ask_for_input_in_range(8, cfg.y - 1, "midaPort")


Implementació i ús correcte de les comandes de la bash (2/2) 
-- la funcion esa de bash q se llama "validate" es un poco magia negra
--- la util_ask_for_input_in_range()  en bash usa return ${INPUT} (ns si es correcte)


Implementació i ús correcte de les comandes python (2/2) 
-- no "os", solo sys y getopts:
	import getopt, sys

	ni idea de si le parece bonito el python


Pel que l’autoavaluació d’aquest grup és de ??/10. 
	11/10
